buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "0.4.2-1.12.2"
group = "com.mrcrayfish.cdm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "device-mod"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }
    }
}

def mc_version = "1.12.2"
def jei_version = "4.9.1.179"

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    //runtimeOnly "mezz.jei:jei_${mc_version}:${jei_version}"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", "1.12.2"
//
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':"1.12.2"
//    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        //exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Devices Mod",
                "Specification-Vendor": "Ultreon Team",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Ultreon Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}
