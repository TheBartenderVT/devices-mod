//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrMethodMayBeStatic
plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.2"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
}
repositories {
    gradlePluginPortal()
}

architectury {
    minecraft = rootProject.minecraft_version
}
version = "${mod_version}"//-${System.getenv("GITHUB_BUILD_NUMBER") == null ? "local" : System.getenv("GITHUB_BUILD_NUMBER")}"

Object getInGameVersion() {
    return "${mod_version}"//+${System.getenv("GITHUB_BUILD_NUMBER") == null ? "local" : System.getenv("GITHUB_BUILD_NUMBER")}"
}

Object getModDescription() {
    return "${mod_description}"
}
forgix {
    group = "com.ultreon.mods"
    mergedJarName = "devices-${version}.jar"
    outputDir = "build/libs/merged"

    forge {
        projectName = "merge-forge"
        jarLocation = "build/libs/devices-${version}.jar"
    }

    fabric {
        projectName = "merge-fabric"
        jarLocation = "build/libs/devices-${version}.jar"
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.10@zip")
        }
    }

    if (Objects.equals(System.getenv("CIRCLE_CI"), "true")) {
        def copyToArtifacts = tasks.register("copyToArtifacts", Copy) {
            it.mustRunAfter(build)
            it.from files("$buildDir/libs/merged/*.jar")
            it.into file("/tmp/artifacts/")
        }
        remapJar.finalizedBy copyToArtifacts
        remapSourcesJar.finalizedBy copyToArtifacts
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url "https://maven.parchmentmc.org/" }
        maven { url "https://maven.jab125.dev/" }
        maven { url "https://jitpack.io/" }
        maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
        maven { url "https://cursemaven.com/" }
        flatDir { dir "${rootProject.projectDir}/libs/" }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        //noinspection GroovyAccessibility
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}

mergeJars.mustRunAfter build

if (Objects.equals(System.getenv("CIRCLE_CI"), "true")) {
    def copyToArtifacts = tasks.register("copyToArtifacts", Copy) {
        it.mustRunAfter(mergeJars)
        it.from files("$buildDir/libs/merged/*.jar")
        it.into file("/tmp/artifacts/")
    }
    mergeJars.finalizedBy(copyToArtifacts)
}


//build.dependsOn mergeJars