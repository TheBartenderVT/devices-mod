plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

repositories {
    maven { url = "https://cursemaven.com" }
    maven { url "https://maven.terraformersmc.com/releases" }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation "curse.maven:forgeapiportfabric-547434:3671141"
    modImplementation 'com.electronwill.night-config:core:3.6.3'
    modImplementation 'com.electronwill.night-config:toml:3.6.3'

//    include(implementation("org.jetbrains.kotlin:kotlin-reflect:1.7.10"))
//    include(implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"))
//    include(implementation("com.ultreon:ultranlang:0.0.1-dev5"))
    include(implementation("com.jab125:apoint:1.0.0"))

    //shadowCommon "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    //shadowCommon "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"
  //  shadowCommon "com.ultreon:ultranlang:0.0.1-dev5"
 //   shadowCommon "com.jab125:apoint:1.0.0"

//    modApi include("net.fabricmc:fabric-language-kotlin:1.8.2+kotlin.1.7.10")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "com.terraformersmc:modmenu:3.0.0", {
        exclude module: "fabric-api"
    }
}

processResources {
    inputs.property "version", rootProject.getIngame_version()

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.getIngame_version()
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}