package com.mrcrayfish.device.programs.system;

import com.jab125.version.VersionInterval;
import com.jab125.version.VersionPredicate;
import com.jab125.version.VersionPredicateParser;
import com.mrcrayfish.device.MrCrayfishDeviceMod;
import com.mrcrayfish.device.api.app.IIcon;
import com.mrcrayfish.device.api.app.Icons;
import com.mrcrayfish.device.api.app.Layout;
import com.mrcrayfish.device.api.app.ScrollableLayout;
import com.mrcrayfish.device.api.app.component.ItemList;
import com.mrcrayfish.device.api.app.component.Text;
import com.mrcrayfish.device.api.app.renderer.ListItemRenderer;
import com.mrcrayfish.device.api.utils.RenderUtil;
import com.mrcrayfish.device.util.Vulnerability;
import com.mrcrayfish.device.api.app.component.Label;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.Util;
import org.lwjgl.opengl.GL11;

import javax.annotation.Nullable;
import java.awt.*;
import java.lang.System;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;

public class VulnerabilityApp extends SystemApplication {
    private long lastClick = 0;
    private static final Color ITEM_BACKGROUND = Color.decode("0x9E9E9E");
    private static final Color ITEM_SELECTED = Color.decode("0x757575");
    private Layout mainMenu;

    @Override
    public void init(@Nullable NBTTagCompound intent) {
        this.setCurrentLayout(createMenu());
    }
    int marginX = 10;
    int marginY = 10;
    int paddingY = 4;
    private Layout createMenu() {
        this.mainMenu = new Layout(250, 105);
        ItemList<Vulnerability> itemListResults = new ItemList<>(5, 5, ApplicationAppStore.LAYOUT_WIDTH - 10, 5, true);
        itemListResults.setItems(MrCrayfishDeviceMod.getVulnerabilities());
        itemListResults.sortBy(Comparator.comparing(vulnerability -> -vulnerability.effectiveSeverity()));
        itemListResults.setListItemRenderer(new ListItemRenderer<Vulnerability>(18) {
            @Override
            public void render(Vulnerability app, Gui gui, Minecraft mc, int x, int y, int width, int height, boolean selected) {
                Gui.drawRect(x, y, x + width, y + height, selected ? ITEM_SELECTED.getRGB() : ITEM_BACKGROUND.getRGB());
                GL11.glColor4f(1f, 1f, 1f, 1f);
                IIcon icon = getIconFor(app);
                GlStateManager.pushMatrix();
                GlStateManager.translate(x, y, 0);
                GlStateManager.translate(4.5f/1.5f/2, 4.5f/1.5f/2, 0);
                GlStateManager.scale(1.5f, 1.5f, 1);
                icon.draw(mc, 0, 0);
                GlStateManager.popMatrix();
                RenderUtil.drawStringClipped(app.title(), x + 20, y + 5, itemListResults.getWidth() - 22, Color.WHITE.getRGB(), false);
            }
        });
        itemListResults.setItemClickListener((info, index, mouseButton) -> {
            if (mouseButton == 0) {
                if (System.currentTimeMillis() - this.lastClick <= 200) {
                    setCurrentLayout(createMenuFromVulnerability(info));
                } else {
                    this.lastClick = System.currentTimeMillis();
                }
            }
        });
        mainMenu.addComponent(itemListResults);

        return mainMenu;
    }

    private IIcon getIconFor(Vulnerability app) {
        if (!app.affectsCurrentVersion()) return Icons.WARNING_GRAY;
        int severity = app.severity();
        if (severity < 3) {
            return Icons.WARNING;
        }
        if (severity < 6) {
            return Icons.FLASHED_WARNING;
        }
        if (severity <= 10) {
            return Icons.ERROR;
        }
        return Icons.WARNING;
    }

    private Layout createMenuFromVulnerability(Vulnerability vulnerability) {
        Layout layout = new Layout(250, 105);
        com.mrcrayfish.device.api.app.component.Button behindTheNews = new com.mrcrayfish.device.api.app.component.Button(5, 5, Icons.ARROW_LEFT);
        behindTheNews.setClickListener((__, ___, ____) -> {
            setCurrentLayout(mainMenu);
        });
        layout.addComponent(behindTheNews);
        com.mrcrayfish.device.api.app.component.Label l = new com.mrcrayfish.device.api.app.component.Label(vulnerability.title(), 5, 5 + behindTheNews.getHeight()+2);
        l.setScale(1.25);
        layout.addComponent(l);
        layout.addComponent(new Label(vulnerability.reporter() == null ? "Unknown" : vulnerability.reporter(), 5, 18 + behindTheNews.getHeight()+2));
        layout.addComponent(new Label("Affected Versions: " + re(vulnerability.affectedVersions()), 5, 28 + behindTheNews.getHeight()+2));
        layout.addComponent(new Label("Fixed in: " + re(vulnerability.fixVersion(), true), 5, 38 + behindTheNews.getHeight()+2));
        Layout d = ScrollableLayout.create(5, 48 + behindTheNews.getHeight()+2, layout.width-5, 58 - (behindTheNews.getHeight()+2), vulnerability.description() == null ? "No description provided" : vulnerability.description());
        layout.addComponent(d);
        return layout;
    }

    private String re(Collection<VersionPredicate> d, boolean e) {
        if (e && d.isEmpty()) return "!(-∞,∞)";
       // VersionInterval prev = VersionInterval;
        ArrayList<String> l = new ArrayList<>();
        for (VersionPredicate versionPredicate : d) {
            if (versionPredicate instanceof VersionPredicateParser.SingleVersionPredicate && versionPredicate.getInterval().getMin().equals(versionPredicate.getInterval().getMax())) {
                VersionPredicateParser.SingleVersionPredicate p = (VersionPredicateParser.SingleVersionPredicate) versionPredicate;
                l.add(p.getRefVersion().getFriendlyString());
            } else
            l.add(versionPredicate.getInterval().toString());
        }
       // var dd = prev.or(l);
//        for (VersionPredicate versionPredicate : d) {
//            System.out.println(versionPredicate);
//            System.out.println(versionPredicate.getInterval());
//            prev = prev.or(versionPredicate.getInterval());
//        }
        StringBuilder a = new StringBuilder();
        for (String versionInterval : l) {
            a.append(versionInterval).append(" ");
        }
        a.deleteCharAt(a.length()-1);
        return a.toString();
    }

    private String re(Collection<VersionPredicate> d) {
        return re(d, false);
    }

    @Override
    public void load(NBTTagCompound tag) {

    }

    @Override
    public void save(NBTTagCompound tag) {

    }
}
