package com.mrcrayfish.device.util;

import com.google.common.collect.ImmutableList;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.jab125.version.Version;
import com.jab125.version.VersionParsingException;
import com.jab125.version.VersionPredicate;
import com.mrcrayfish.device.MrCrayfishDeviceMod;
import com.mrcrayfish.device.Reference;
import com.mrcrayfish.device.api.ApplicationManager;
import com.mrcrayfish.device.api.app.Icons;
import com.mrcrayfish.device.core.Laptop;
import com.mrcrayfish.device.object.AppInfo;
import com.mrcrayfish.device.object.TrayItem;
import net.minecraft.util.ResourceLocation;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

public final class Vulnerability {
    @Nullable
    private final String reporter;
    private final String title;
    @Nullable
    private final String description;
    private final int severity;
    private final Collection<VersionPredicate> affectedVersions;
    private final Collection<VersionPredicate> fixVersion;
    private final boolean affectsCurrentVersion;

    public Vulnerability(@Nullable String reporter, String title, @Nullable String description, int severity, Collection<VersionPredicate> affectedVersions, Collection<VersionPredicate> fixVersion, boolean affectsCurrentVersion) {
        this.reporter = reporter;
        this.title = title;
        this.description = description;
        this.severity = severity;
        this.affectedVersions = affectedVersions;
        this.fixVersion = fixVersion;
        this.affectsCurrentVersion = affectsCurrentVersion;
    }

    public static List<Vulnerability> parseArray(JsonArray array) {
        ArrayList<Vulnerability> arraylist = new ArrayList<Vulnerability>() {
            @Override
            public boolean add(@Nullable Vulnerability vulnerability) {
                if (vulnerability != null) return super.add(vulnerability);
                return false;
            }
        };
        for (JsonElement jsonElement : array) {
            if (jsonElement.isJsonObject()) {
                arraylist.add(parseObject(jsonElement.getAsJsonObject()));
            }
        }
        return ImmutableList.copyOf(arraylist);
    }

    public static Vulnerability parseObject(JsonObject array) {
        boolean hasReporter = array.has("reporter");
        boolean hasDescription = array.has("description");
        boolean hasFixVersion = array.has("fixVersions");
        Collection<VersionPredicate> affectedVersions = toStringList(array.getAsJsonArray("affectedVersions"));
        boolean d = false;
        for (VersionPredicate affectedVersion : affectedVersions) {
            try {
                d = affectedVersion.test(Version.parse(Reference.VERSION));
                if (d) break;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new Vulnerability(hasReporter ? array.get("reporter").getAsString() : null, array.get("title").getAsString(), hasDescription ? array.get("description").getAsString() : null, array.get("severity").getAsInt(), affectedVersions, !hasFixVersion ? new ArrayList<>() : toStringList(array.get("fixVersions").getAsJsonArray()), d);
    }

    private static Collection<VersionPredicate> toStringList(JsonArray array) {
        ArrayList<String> l = new ArrayList<>();
        for (JsonElement jsonElement : array) {
            l.add(jsonElement.getAsString());
        }
        try {
            return VersionPredicate.parse(l);
        } catch (Exception e) {
            e.printStackTrace(); // oh no
            return new ArrayList<>();
        }
    }

    @Override
    public String toString() {
        return "Vulnerability{" +
                "reporter='" + reporter + '\'' +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                ", severity=" + severity +
                ", affectedVersions=" + affectedVersions +
                ", fixVersion='" + fixVersion + '\'' +
                '}';
    }

    public static class VulnerabilityTrayItem extends TrayItem {
        public VulnerabilityTrayItem() {
            super(vulnerabilitiesAffectUs() ? Icons.WARNING : Icons.WARNING_GRAY);
        }

        private static boolean vulnerabilitiesAffectUs() {
            return MrCrayfishDeviceMod.getVulnerabilities().stream().anyMatch(Vulnerability::affectsCurrentVersion);
        }

        private final boolean vulnerabilities = vulnerabilitiesAffectUs();
        private int tick;
        private boolean stat = false;

        @Override
        public void tick() {
            super.tick();
            if (!vulnerabilities) return;
            if (tick >= 15) {
                tick = 0;
                this.setIcon(stat ? Icons.FLASHED_WARNING : Icons.WARNING);
                stat = !stat;
            }
            tick++;
        }

        @Override
        public void handleClick(int mouseX, int mouseY, int mouseButton) {
            AppInfo info = ApplicationManager.getApplication(String.valueOf(new ResourceLocation("cdm", "vulnerability")));
            if (info != null) {
                Laptop.getSystem().openApplication(info);
            }
        }
    }

    public int effectiveSeverity() {
        return affectsCurrentVersion ? severity : 0;
    }

    @Nullable
    public String reporter() {
        return reporter;
    }

    public String title() {
        return title;
    }

    @Nullable
    public String description() {
        return description;
    }

    public int severity() {
        return severity;
    }

    public Collection<VersionPredicate> affectedVersions() {
        return affectedVersions;
    }

    public Collection<VersionPredicate> fixVersion() {
        return fixVersion;
    }

    public boolean affectsCurrentVersion() {
        return affectsCurrentVersion;
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        Vulnerability that = (Vulnerability) obj;
        return java.util.Objects.equals(this.reporter, that.reporter) &&
                java.util.Objects.equals(this.title, that.title) &&
                java.util.Objects.equals(this.description, that.description) &&
                this.severity == that.severity &&
                java.util.Objects.equals(this.affectedVersions, that.affectedVersions) &&
                java.util.Objects.equals(this.fixVersion, that.fixVersion) &&
                this.affectsCurrentVersion == that.affectsCurrentVersion;
    }

    @java.lang.Override
    public int hashCode() {
        return java.util.Objects.hash(reporter, title, description, severity, affectedVersions, fixVersion, affectsCurrentVersion);
    }

}